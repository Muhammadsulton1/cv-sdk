import asyncio
import time
import functools

from utils.logger import logger


def measure_latency_async():
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            start_time = time.perf_counter()
            result = await func(*args, **kwargs)
            end_time = time.perf_counter()
            elapsed_time = (end_time - start_time) * 1000

            print(f"[LATENCY of async function] {func.__name__}: {elapsed_time:.2f} ms")

            return result

        return wrapper

    return decorator


def measure_latency_sync():
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.perf_counter()
            result = func(*args, **kwargs)
            end_time = time.perf_counter()
            elapsed_time = (end_time - start_time) * 1000
            print(f"[LATENCY] {func.__name__}: {elapsed_time:.2f} ms")

            return result

        return wrapper

    return decorator


def measure_detailed_time(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.perf_counter()
        start_cpu = time.process_time()

        result = await func(*args, **kwargs)

        end_time = time.perf_counter()
        end_cpu = time.process_time()

        wall_time = (end_time - start_time) * 1000
        cpu_time = (end_cpu - start_cpu) * 1000

        print(f"üìä {func.__name__} –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚îú‚îÄ –û–±—â–µ–µ –≤—Ä–µ–º—è (wall clock): {wall_time:.2f} –º—Å")
        print(f"   ‚îú‚îÄ CPU –≤—Ä–µ–º—è: {cpu_time:.2f} –º—Å")
        print(f"   ‚îî‚îÄ I/O –≤—Ä–µ–º—è: {wall_time - cpu_time:.2f} –º—Å")

        return result

    return wrapper


def retry(retries=3, delay=1):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
    :param retries: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    :type retries: int
    :param delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫—É–Ω–¥–∞)
    :type delay: int
    """

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            for attempt in range(1, retries + 1):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
                    if attempt < retries:
                        await asyncio.sleep(delay)
            raise RuntimeError(f"–§—É–Ω–∫—Ü–∏—è '{func.__name__}' –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")

        return wrapper

    return decorator
